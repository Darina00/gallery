{"version":3,"sources":["components/header/Header.js","components/footer/Footer.js","components/modal/Modal.js","components/main-component/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","year","Date","getFullYear","Modal","props","idPhoto","localStorage","getItem","React","useState","infoPhoto","setInfo","name","setName","comment","setComment","isDisabled","setDisabled","useEffect","fetch","then","res","json","result","changeDisabled","length","onClick","onClose","src","url","alt","type","placeholder","value","onChange","e","target","method","headers","body","JSON","stringify","response","currentInfo","comments","push","id","Math","round","random","date","text","disabled","map","item","key","getDay","getMonth","MainComponent","images","setImages","isModalOpen","setModal","toggleModal","el","removeItem","setItem","window","elem","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6cb2d495.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nexport default function Header() {\r\n    return (\r\n        <header className=\"header-wrapper\">\r\n            <span>TEST APP</span>\r\n        </header>\r\n    )\r\n}","import React from 'react';\r\nimport './Footer.css';\r\n\r\nexport default function Footer() {\r\n    const year = new Date().getFullYear();\r\n    return (\r\n        <footer className=\"footer-wrapper\">\r\n            <hr />\r\n            <span>&copy; 2018-{year}</span>\r\n        </footer>\r\n    )\r\n}","import React from 'react';\r\nimport './Modal.css';\r\n\r\nexport default function Modal(props) {\r\n    const idPhoto = localStorage.getItem('idImg');\r\n    const [infoPhoto, setInfo] = React.useState(null);\r\n    const [name, setName] = React.useState('');\r\n    const [comment, setComment] = React.useState('');\r\n    const [isDisabled, setDisabled] = React.useState(true);\r\n    React.useEffect( () => {\r\n        fetch(`https://boiling-refuge-66454.herokuapp.com/images/${idPhoto}`)\r\n        .then( res => res.json() )\r\n        .then( result => setInfo(result) )    \r\n    }, [idPhoto] );\r\n\r\n    const changeDisabled = () => {\r\n        if(name.length > 0 && comment.length > 0) {\r\n            setDisabled(false);\r\n        } else {\r\n            setDisabled(true);\r\n        };\r\n    }\r\n\r\n    const changeComment = e => {\r\n        setComment(e.target.value);\r\n        changeDisabled();\r\n    };\r\n\r\n    const changeName = e => {\r\n        setName(e.target.value);\r\n        changeDisabled();\r\n    };\r\n\r\n    const post = () => {\r\n        fetch(`https://boiling-refuge-66454.herokuapp.com/images/${idPhoto}/comments`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ name: name, comment: comment })\r\n        })\r\n        .then(response => {\r\n            let currentInfo = infoPhoto;\r\n            currentInfo.comments.push({id: Math.round( 400 - 0.5 + Math.random() * (2000 - 400 + 1) ), date: new Date()/1000, text: comment});\r\n            setInfo(currentInfo);\r\n            setComment('');\r\n            setName('');\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal-wrapper\">\r\n            <div className=\"modal\">\r\n                <h1 onClick={props.onClose} className=\"close-button\">X</h1>    \r\n                {infoPhoto ? \r\n                    <div className=\"modal-content\">\r\n                        <div>\r\n                            <img src={infoPhoto.url ? infoPhoto.url : 'Загрузка...'} alt=\"pct\" />\r\n                            <form>\r\n                                <input type=\"text\" placeholder=\"Ваше имя\" value={name} onChange={changeName} /> \r\n                                <input type=\"text\" placeholder=\"Ваш комментарий\" value={comment} onChange={changeComment} /> \r\n                                <input type=\"button\" value=\"Оставить комментарий\" onClick={post} disabled={isDisabled} />   \r\n                            </form> \r\n                        </div>\r\n                        <div>\r\n                            {infoPhoto.comments.length > 0 ? infoPhoto.comments.map( item => (\r\n                                <div key={item.id}>\r\n                                    <h6>{new Date(item.date * 1000).getDay()}.{new Date(item.date * 1000).getMonth()}.{new Date(item.date * 1000).getFullYear()}</h6>\r\n                                    <h3>{item.text}</h3>\r\n                                </div>\r\n                            ) ) : 'Комментариев нет'}\r\n                        </div>\r\n                    </div> : 'Загрузка...'}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './MainComponent.css';\r\nimport Modal from '../modal/Modal';\r\n\r\nexport default function MainComponent(props) {\r\n    const [images, setImages] = React.useState([]);\r\n    const [isModalOpen, setModal] = React.useState(false);\r\n\r\n    const toggleModal = (el) => {\r\n        setModal(!isModalOpen);\r\n        if(!isModalOpen) {\r\n        localStorage.setItem('idImg', el);\r\n        } else {\r\n        localStorage.removeItem('idImg');\r\n        }\r\n    };\r\n    React.useEffect( () => {\r\n        window.fetch(\"https://boiling-refuge-66454.herokuapp.com/images\")\r\n        .then( res => res.json() )\r\n        .then( result => setImages(result) )\r\n    } )\r\n    return (\r\n        <main className=\"main-wrapper\">\r\n            {images.map( elem => (\r\n                <img key={elem.id} src={elem.url} alt=\"Click!\" onClick={() => toggleModal(elem.id)} />\r\n            ) )}\r\n            {isModalOpen &&\r\n                <Modal onClose={toggleModal} />\r\n            }\r\n        </main>\r\n    )\r\n}","import React from 'react';\nimport Header from './components/header/Header';\nimport Footer from './components/footer/Footer';\nimport MainComponent from './components/main-component/MainComponent';\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MainComponent />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}